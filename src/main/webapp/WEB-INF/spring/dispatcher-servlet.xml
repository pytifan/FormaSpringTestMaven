<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.1.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- - POJOs labeled with the @Controller and @Service annotations are auto-detected.  -->
    <context:component-scan base-package="org.region.forms.osvoenie"/>
<!-- Configures the @Controller programming model -->
    <mvc:annotation-driven /><!--  for example:   <mvc:annotation-driven conversion-service="conversionService"/>-->
       <!-- Forwards requests to the "/" resource to the "welcome" view -->
<!--    <mvc:view-controller path="/" view-name="index" />-->
 <!--  all resources inside folder src/main/webapp/resources are mapped so they can be refered to inside JSP files (see header.jsp for more details) -->
<!--    <mvc:resources mapping="/resources/**"  location="/resources/"/>-->
    <!-- uses WebJars so Javascript and CSS libs can be declared as Maven dependencies (Bootstrap, jQuery...) -->
    <mvc:resources mapping="/webjars/**"    location="classpath:/META-INF/resources/webjars/"/>
    <mvc:resources mapping="/libs/**"       location="classpath:/META-INF/resources/libs" />
    
    <mvc:resources mapping="/pages/**"      location="/WEB-INF/pages/" />
    <mvc:resources mapping="/resources/js/**"    location="/resources/js/" />
    <mvc:resources mapping="/resources/css/**"    location="/resources/css/" />
    <mvc:resources mapping="/resources/images/**"    location="/resources/images/" />
 
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="contentNegotiationManager" ref="cnManager"/>  
        <property name="viewResolvers">
        	<list>
                    	<!-- Default viewClass: JSTL view (JSP with html output) -->
			    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		 <!-- Example: a logical view name of 'vets' is mapped to '/WEB-INF/jsp/vets.jsp' -->
			        <property name="prefix" value="/WEB-INF/jsp/"/>
			        <property name="suffix" value=".jsp"/>
			    </bean>		
                                <!-- Used here for 'xml' and 'atom' views  -->
			    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/>
        	</list>
        </property>
    </bean>

    <!-- Simple strategy: only path extension is taken into account -->
    <bean id="cnManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="favorPathExtension" value="true"/>
        <property name="ignoreAcceptHeader" value="true"/>
        <property name="defaultContentType" value="text/html"/>
        
        <property name="mediaTypes">
            <map>
                <entry key="html" value="text/html" />
                <entry key="xml" value="application/xml" />
                <entry key="atom" value="application/atom+xml" />
            </map>
        </property>
    </bean>
    
<!--    <bean class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping"/>-->
    <!-- Most controllers will use the ControllerClassNameHandlerMapping above, but
    for the index controller we are using ParameterizableViewController, so we must
    define an explicit mapping for it. -->
<!-- <bean id="urlMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
        <property name="mappings">
            <props>
            <prop key="index.htm">indexController</prop>
            </props>
        </property>
    </bean>
 
    <bean name="/letterForm.htm" class="forms.spring.test.LetterFormController" />   -->   
    
       <!-- The index controller. -->  
   <!--  <bean name="indexController"
          class="org.springframework.web.servlet.mvc.ParameterizableViewController"
          p:viewName="index" />-->
    
  <!-- a "standard" Spring FormController for the Letter example -->
<!--      <bean id="letterFormController" class="org.jodreports.web.spring.controller.LetterFormController">
              <property name="formView" value="letterForm"/>
              <property name="successView" value="RecipientSuccess"/>
          </bean>-->

<!-- ready-to-use document generators -->
  <bean id="xmlDocumentGenerator" class="org.region.forms.osvoenie.spring.controller.XmlDocumentGenerator"/>
  <bean id="httpParametersDocumentGenerator" class="org.region.forms.osvoenie.spring.controller.HttpParametersDocumentGenerator"/>
  <bean id="ReportGenerator" class="org.region.forms.osvoenie.spring.controller.ReportGenerator"/>
<!--  <bean id="LetterFormController" class="org.jodreports.web.spring.controller.LetterFormController"/>-->

  <bean id="handlerMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
    <property name="mappings">
      <props>
<!--        Letter example with a proper FormController -->
<!--        <prop key="*Forma-OsvoenieX.htm">LetterFormController</prop>-->
<!--        <prop key="/mvc/letter.html">letterFormController</prop> -->     
        <!--- Some possible key values:
              - "foo.pdf"  ->  PDF from template "foo"
              - "foo.*"    ->  any format from template "foo"AlexRemote
              - "*.pdf"    ->  PDF from any template
              - "*"        ->  any format from any template - -->
        <!-- named templates -->
<!--    <prop key="formaOsvoenie.*">httpParametersDocumentGenerator</prop>-->
    <prop key="formaOsvoenie.*">ReportGenerator</prop>
<!--    <prop key="letterForm.odt">httpParametersDocumentGenerator</prop>
        <prop key="formaOsvoenie.pdf">httpParametersDocumentGenerator</prop>
        <prop key="formaOsvoenie.odt">httpParametersDocumentGenerator</prop>
        <prop key="formaOsvoenie.doc">httpParametersDocumentGenerator</prop>
        <prop key="formaOsvoenie.txt">httpParametersDocumentGenerator</prop>-->
<!--    ready to use; just drop new templates into WEB-INF/templateAlexRemotes/--> 
<!--    <prop key="/params/*">httpParametersDocumentGenerator</prop>-->
<!--    <prop key="/xml/*">xmlDocumentGenerator</prop>       -->
      </props>
    </property>
  </bean>

  <bean id="BundleviewResolver" class="org.springframework.web.servlet.view.ResourceBundleViewResolver">
    <property name="basename" value="views"/>
  </bean>
</beans>